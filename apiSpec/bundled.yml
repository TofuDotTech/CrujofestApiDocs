openapi: 3.0.3
info:
  title: Crujofest API
  version: 1.0.0
servers:
  - url: https://crujofest.party/api/v1
  - url: http://dev.crujofest.party/api/v1
paths:
  /auth/login:
    post:
      summary: Logs the user in
      description: Logs the user registered by email
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedSchema'
        '400':
          $ref: '#/components/responses/400'
        '401':
          description: 'unauthorized: Incorrect password or username'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /auth/register:
    post:
      summary: Registers a new user
      description: Registers a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Between 6-30 characters and no special characters
                password:
                  type: string
                  description: Between 8-16 characters, uppercase and lowercase letters
                displayName:
                  type: string
                  description: Between 6-30 characters and no special characters
                email:
                  type: string
                birthdate:
                  type: string
                  description: YYYY-MM-DD
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: invite_not_found - BETA ONLY. Invite not found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: username_exists or email_exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /auth/spotify_auth:
    post:
      summary: Authenticates a user with spotify
      description: Authenticates a user with spotify for login and registration
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: code provided by spotify auth flow
                redirectUri:
                  type: string
                  description: valid redirect uri depending on where the client is authenticating
      responses:
        '200':
          description: 'Successful request. Codes: login, register'
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      code:
                        type: string
                        enum:
                          - register
                        description: User registration
                      accessToken:
                        type: string
                        description: spotify access token required for spotify registration request
                      refreshToken:
                        description: spotify refresh toekn required for spotify registration request
                        type: string
                      spotifyExpiresIn:
                        description: spotify expiration in seconds required for spotify registration request
                        type: number
                      askForEmail:
                        type: boolean
                  - type: object
                    properties:
                      code:
                        type: string
                        enum:
                          - login
                        description: User login
                      token:
                        type: string
                        description: JWT token generated
                      expiresIn:
                        type: string
                        enum:
                          - 15d
                        description: Token expiration time
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /auth/spotify_register:
    post:
      summary: Registers a user with spotify
      description: Register a user with spotify
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                refreshToken:
                  type: string
                username:
                  type: string
                  description: Between 6-30 characters and no special characters
                displayName:
                  type: string
                  description: Between 6-30 characters and no special characters
                birthdate:
                  type: string
                  description: YYYY-MM-DD
                expiresIn:
                  type: number
                email:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: Not invited to Crujofest (only in beta). invite_not_found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: |
            username_exists or
            email_exists or
            spotify_user_no_email - Spotify user has no email and it was not
            provided in the body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /parties/invites/{inviteId}:
    parameters:
      - name: inviteId
        in: path
        required: true
        schema:
          type: string
    patch:
      summary: Accepts an invitation
      description: Accepts an invitation
      tags:
        - Parties
      security:
        - BearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '404':
          description: party_invite_not_found - Party invite not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: in_party - User is already in a party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /parties/invites:
    get:
      summary: Returns all invites to the user
      description: Returns all invites to the user
      tags:
        - Parties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  invites:
                    type: array
                    items:
                      type: object
                      properties:
                        inviteId:
                          type: string
                        userId:
                          type: string
                        partyCode:
                          type: string
                        toParty:
                          type: object
                          properties:
                            partyName:
                              type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '500':
          $ref: '#/components/responses/500'
    post:
      summary: Invites various users to the party
      description: Invites various users to the party
      tags:
        - Parties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ids:
                  type: array
                  items:
                    type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: |
            not_correct_role - User does not have the correct role
            spotify_access_revoked
            user_is_guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: not_in_party - User is not in a party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /parties:
    post:
      summary: Creates a new party
      description: Creates a new party
      tags:
        - Parties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Party name. Between 6-30 characters and no special characters
                themeId:
                  type: number
                  description: Id from choosed theme
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  playlistId:
                    type: string
                    description: Spotify playlist id associated with the party
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '409':
          description: |
            "in_party: User is in a party
              not_connected_spotify: User is not connected to spotify"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /parties/{partyCode}/users:
    parameters:
      - $ref: '#/components/parameters/partyCodeParam'
    get:
      summary: Returns users connected to a party
      description: Support guest users. Returns users connected to a party
      tags:
        - Parties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request. Returns users
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                        displayName:
                          type: string
                        photo:
                          type: string
                          nullable: true
                        roleId:
                          type: number
                          nullable: true
                        isGuest:
                          type: boolean
                        color:
                          type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          description: not_in_party - User is not in a party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /parties/{partyCode}/current_song:
    parameters:
      - $ref: '#/components/parameters/partyCodeParam'
    post:
      summary: Notify the server that the currently playing song has changed
      description: Notify the server that the currently playing song has changed
      tags:
        - Parties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                songUri:
                  type: string
                  description: Spotify song URI
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  queuePointer:
                    type: number
                    description: Pointer to the current song in the queue
        '400':
          $ref: '#/components/responses/400'
        '403':
          description: |
            not_in_party - User is not in a party
            spotify_access_revoked - User possibly revoked crujofest access to spotify
            user_not_host - User is not host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          description: |
            internal_error - Something went wrong. Try again later
            has_finished - The queue has finished and wont accept more requests
            pointer_casting_error - Could not cast pointer to int
            null_song - Could not fetch the currently playing song
            pointer_error - Something went wrong when calculating the new pointer value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
    patch:
      summary: Notify the server that the currently playing song was paused or resumed
      description: Notify the server that the currently playing song was paused or resumed
      tags:
        - Parties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                flag:
                  type: boolean
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '403':
          description: |
            not_in_party - User is not in a party
            spotify_access_revoked - User possibly revoked crujofest access to spotify
            user_not_host - User is not host
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /parties/{partyCode}/queue:
    parameters:
      - $ref: '#/components/parameters/partyCodeParam'
    post:
      summary: Query song in the queue
      description: Query song in the queue
      tags:
        - Parties
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resultItemSchema'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '409':
          description: repeated_song - Song is already in queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /parties/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Returns past party
      description: Returns past party
      tags:
        - Parties
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  partyCode:
                    type: string
                  partyName:
                    type: string
                  partyPlaylistId:
                    type: string
                  initialDate:
                    type: string
                  finalDate:
                    type: string
                  themeId:
                    type: number
                  pastPartyUsers:
                    type: array
                    items:
                      type: object
                      properties:
                        wasHost:
                          type: boolean
                        user:
                          type: object
                          properties:
                            username:
                              type: string
                            displayName:
                              type: string
                            photo:
                              type: string
                              nullable: true
                            color:
                              type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '404':
          description: |
            party_not_found - Party not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /roles:
    description: Requires authentication
    get:
      summary: Gets all roles available
      description: Supports guest users. Gets all roles available
      tags:
        - Roles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        roleId:
                          type: number
                        roleName:
                          type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /themes:
    description: Requires authentication
    get:
      summary: Gets all themes available
      description: Supports guest users. Gets all themes available
      tags:
        - Themes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      type: object
                      properties:
                        themeId:
                          type: number
                        themeName:
                          type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /users/{username}/role:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    patch:
      summary: Change user role
      description: Change user role
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleId:
                  type: number
                  description: new role for user
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: |
            not_correct_role - User does not have the correct role
            spotify_access_revoked
            user_is_guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '404':
          description: user_not_found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: not_in_party - User is not in a party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/{username}/verify:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    patch:
      summary: Verifies user email
      description: Verifies user email
      tags:
        - Users
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: user_not_found - User with that email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/{username}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    get:
      summary: Gets a specific user info
      description: Supports guest user. Gets a specific user info given his username
      tags:
        - Users
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      displayName:
                        type: string
                      username:
                        type: string
                      photo:
                        type: string
                        description: Photo URL
                      source:
                        type: number
                        description: 0-classic 1-spotify
                      id:
                        type: string
                      spotifyUserId:
                        type: string
                      isGuest:
                        type: boolean
                        description: Is a temporal user just for a party
                      color:
                        type: string
                        description: Profile color
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: user_not_found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/guest/party:
    patch:
      summary: Joins a temporal user to a party by URL
      description: Joins a temporal user to a party by URL
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partyCode:
                  type: string
                displayName:
                  type: string
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loggedSchema'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: party_not_found - Party not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/invites:
    post:
      summary: Sends an email invitation to register to Crujofest
      description: Sends an email invitation to register to Crujofest
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of the user that sent the invitation url
                email:
                  type: string
                  description: email to send invitation
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: user_not_found - User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: |
            email_registered - There is already an account with this email
            email_invited - This email has already been invited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '429':
          description: invitations_limit_reached - The number of invites allowed by this user has already been reached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/me/invites:
    get:
      summary: Gets the number of invites redeemed
      description: Gets the number of invites redeemed
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  redeemed:
                    type: number
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '500':
          $ref: '#/components/responses/500'
  /users/me/party:
    get:
      summary: Returns current party
      description: Supports guest users. Returns current party
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  partyInfo:
                    type: object
                    properties:
                      roleId:
                        type: number
                      spotifyToken:
                        type: string
                      currentParty:
                        type: object
                        properties:
                          partyCode:
                            type: string
                          partyName:
                            type: string
                          themeId:
                            type: number
                          partyPlaylistId:
                            type: string
                          pastPartyId:
                            type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '409':
          description: not_in_party - User is not in a party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Deletes or leaves party
      description: Supports guest users. Deletes or leaves party depending on user role
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: deletePlaylist
          in: query
          required: false
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          description: |
            deletePlaylist_not_provided - Trying to delete party but no
            deletePlaylist param provided
            invalid_body
            invalid_fields
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/errorSchema'
                  - type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
                      fields:
                        type: array
                        items:
                          type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: party_not_found - Party not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: not_in_party - User is not in a party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Joins a party by URL
      description: Joins a party by URL
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                partyCode:
                  type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '404':
          description: party_not_found - Party does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: in_party - User is in a party
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/me/photo:
    patch:
      summary: Uploads and updates user photo
      description: Uploads and updates user photo
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '500':
          $ref: '#/components/responses/500'
  /users/me/pswd:
    patch:
      summary: Change user password
      description: Change user password
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPasssword:
                  type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: |
            password_incorrect - old password is incorrect
            spotify_access_revoked
            user_is_guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: user_not_classic - User was not registered with username and password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/me/spotify:
    patch:
      summary: Connects spotify to a classic account
      description: Connects spotify to a classic account
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Spotify provided code
                redirectUri:
                  type: string
                  description: Valid redirect uri depending on where the client is authenticating
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: user_not_classic - Can't connect spotify account if user is not classic spotify_access_revoked user_is_guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '409':
          description: |
            user_connected - User is connected to a spotify account
            account_connected - Other user has this spotify account connected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Logs out of connected spotify account
      description: Logs out of connected spotify account for classic user
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/204'
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: error_logout - User does not have source 0 (classic) or does not have a connected spotify account spotify_access_revoked user_is_guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/me:
    get:
      summary: Get logged user info
      description: Supports guest users. Get logged user info
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      displayName:
                        type: string
                      username:
                        type: string
                      birthdate:
                        type: string
                      photo:
                        type: string
                      email:
                        type: string
                      emailVerified:
                        type: boolean
                      isGuest:
                        type: boolean
                      source:
                        type: number
                      spotifyUserId:
                        type: string
                      color:
                        type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
    patch:
      summary: Modifies some fields of the logged user
      description: Modifies email, displayName and birthdate of the logged user
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                displayName:
                  type: string
                birthdate:
                  type: string
                  description: YYYY-MM-DD
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '500':
          $ref: '#/components/responses/500'
    delete:
      summary: Deletes the logged user
      description: Deletes the logged user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: password
          in: query
          required: false
          schema:
            type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          description: |
            Fields are incorrect
            invalid_fields - an individual field failed
            invalid_body - the body as object failed, example is null
            no_password - User is classic and no password was provided
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
                  - type: object
                    properties:
                      code:
                        type: string
                      message:
                        type: string
                      fields:
                        type: array
                        items:
                          type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          description: |
            password_incorrect - password is incorrect
            spotify_access_revoked
            user_is_guest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/search/{query}:
    parameters:
      - name: query
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Search for a user
      description: Supports guest users. Search for a user given a query string
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        displayName:
                          type: string
                        username:
                          type: string
                        photo:
                          type: string
                          description: Photo URL
                        source:
                          type: number
                          description: 0-classic 1-spotify
                        id:
                          type: string
                        spotifyUserId:
                          type: string
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /users/host/spotifyToken:
    get:
      summary: Gets the party host spotify access token
      description: Supports guest users. Gets the party host spotify access token
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: not_found - Party or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/me/token:
    patch:
      summary: Refreshes the user's token
      description: Accepts guest users. Refreshes the users's token
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expiresIn:
                    type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /users/account/password:
    post:
      summary: Sends an email to change user password
      description: Sends and email to change user password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          description: unauthorized - unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
  /users/me/past-parties:
    get:
      summary: Returns all past parties the user has joined
      description: Returns all past parties the user has joined
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: cursor
          in: query
          required: false
          schema:
            type: string
            description: last past party id
        - name: limit
          in: query
          required: false
          schema:
            type: string
            description: How many records to fetch, no more than 10
      responses:
        '200':
          description: Past parties
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    partyCode:
                      type: string
                    partyName:
                      type: string
                    partyPlaylistId:
                      type: string
                    initialDate:
                      type: string
                    finalDate:
                      type: string
                    themeId:
                      type: number
                    pastPartyUsers:
                      type: array
                      items:
                        type: object
                        properties:
                          roleId:
                            type: number
                          user:
                            type: object
                            properties:
                              displayName:
                                type: string
                              username:
                                type: string
                              photo:
                                type: string
                                nullable: true
                              color:
                                type: string
                    pastPartyGuestUsers:
                      type: array
                      items:
                        type: object
                        properties:
                          roleId:
                            type: number
                          color:
                            type: string
                          name:
                            type: string
                    _count:
                      type: object
                      properties:
                        pastPartyUsers:
                          type: number
                        pastPartyGuestUsers:
                          type: number
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403withGuest'
        '500':
          $ref: '#/components/responses/500'
  /users/me/spotify-token:
    get:
      summary: Get spotify access token
      description: Supports guest users. Gets the user's or host (if in party) spotify access token
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'
  /password-reset:
    patch:
      summary: Resets user password
      description: Resets user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                new:
                  type: string
      responses:
        '204':
          $ref: '#/components/responses/204'
        '400':
          $ref: '#/components/responses/400'
        '401':
          description: unauthorized - unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorSchema'
        '500':
          $ref: '#/components/responses/500'
components:
  schemas:
    loggedSchema:
      type: object
      properties:
        token:
          type: string
          description: JWT token generated
        expiresIn:
          type: string
          enum:
            - 15d
          description: Token expiration time
    errorSchema:
      type: object
      properties:
        code:
          type: string
          description: error code
        message:
          type: string
          description: error message
    resultItemSchema:
      type: object
      properties:
        artwork:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              height:
                type: number
              width:
                type: number
        track:
          type: string
        artist:
          type: string
        duration:
          type: number
        url:
          type: string
        uri:
          type: string
        album:
          type: string
    currentSongSchema:
      type: object
      properties:
        isPlaying:
          type: boolean
        album:
          type: string
        artwork:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
              height:
                type: number
              width:
                type: number
        artist:
          type: string
        explicit:
          type: boolean
        track:
          type: string
        url:
          type: string
        disabledControls:
          type: object
          properties:
            interrupting_playback:
              type: boolean
              nullable: true
            pausing:
              type: boolean
              nullable: true
            resuming:
              type: boolean
              nullable: true
            seeking:
              type: boolean
              nullable: true
            skipping_next:
              type: boolean
              nullable: true
            skipping_prev:
              type: boolean
              nullable: true
            toggling_repeat_context:
              type: boolean
              nullable: true
            toggling_shuffle:
              type: boolean
              nullable: true
            toggling_repeat_track:
              type: boolean
              nullable: true
            transferring_playback:
              type: boolean
              nullable: true
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    '204':
      description: Successful request
      content:
        text/plain:
          schema:
            type: string
            example: OK
    '400':
      description: |
        Fields are incorrect
        invalid_fields - an individual field failed
        invalid_body - the body as object failed, example is null
      content:
        application/json:
          schema:
            oneOf:
              - type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
              - type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  fields:
                    type: array
                    items:
                      type: string
    '401':
      description: Unauthorized
      content:
        text/plain:
          schema:
            type: string
            description: Unauthorized
    '403':
      description: spotify_access_revoked - User possibly revoked crujofest access to spotify
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
    '500':
      description: internal_error - Something went wrong. Try again later
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/errorSchema'
    403withGuest:
      description: |
        spotify_access_revoked - User possibly revoked crujofest access to
        spotify
        user_is_guest - Guest users cannot perform this action
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
              message:
                type: string
  parameters:
    partyCodeParam:
      name: partyCode
      in: path
      required: true
      schema:
        type: string
    usernameParam:
      name: username
      in: path
      required: true
      schema:
        type: string
